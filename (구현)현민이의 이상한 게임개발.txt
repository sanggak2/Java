static int X, Y; //위치인덱스
    static int Map[][] = new int[100][100];   //맵 (X, Y)
    static int count = 0;   //결과값

    public static void main(String[] args) {
        //맵 크기 입력
        Scanner scan = new Scanner(System.in);
        int MapSize[] = new int[2];   //맵사이즈 [0] = X, [1] = Y
        int Position[] = new int[2];   //위치
        int direction;          //방향

        //0 : 북쪽, 1 : 동쪽, 2 : 남쪽, 3 : 서쪽
        for(int i = 0; i < 2; i++){ MapSize[i] = scan.nextInt(); }
        if(MapSize[0] < 3 || MapSize[1] < 3){System.out.println("맵사이즈는 3x3 이상!");System.exit(0);}

        for(int i = 0; i < 2; i++){ Position[i] = scan.nextInt(); }
        direction = scan.nextInt();
        if(direction > 3 || direction < 0){System.out.println("방향을 적으라고 지그음!!!!");System.exit(0);}
        X = Position[0]; Y = Position[1];

        MakingMap(MapSize[0], MapSize[1], scan);   //맵 만들기
        MapCheck(MapSize);    //맵 외곽 바다인지 체크

        if(Map[Y][X] == 1)
        {System.out.println("바다에 떨어지면 죽어요!!!"); System.exit(0);}   //바다에 떨어지면 죽어요!

        count++;                //처음 노드 갔던 노드만들기
        Map[Y][X] = 2;
        visX[0] = X;
        visY[0] = Y;

        System.out.println("count = " + SearchLand(direction, MapSize));
        Mapstatus(MapSize[0], MapSize[1]);
    }

    static void MakingMap(int X, int Y, Scanner scan){
        List<Integer> list = new ArrayList<>();
        String MapX;   //행 입력받는 변수

        scan.nextLine();   //이거 없으면 처음에 행 입력하는게 스킵되서 안됨..;;
        for(int i = 0; i < Y; i++){
            MapX = scan.nextLine();
            //행 리스트에 넣기
            for(int j = 0; j < MapX.length(); j++){
                if(MapX.charAt(j) == ' '){ continue; }   //공백이면 넘기기
                list.add(Character.getNumericValue(MapX.charAt(j)));   //공백 아니면 리스트에 넣기
            }
            //행 입력길이 잘못했을 시 종료
            if(list.size() != X){
                System.out.println("입력하신 맵 크기가 아니에요!!");
                System.exit(0);
            }
            //잘 입력했으면 맵에 넣어주기
            else{
                for(int x = 0; x < X; x++){ Map[i][x] = list.get(x);}
                list.clear();
            }
        }
    }
    static void MapCheck(int mapsize[]){
        int x = mapsize[0]-1, y = mapsize[1]-1;
        //가로  =
        for(int i = 0; i < mapsize[0]; i++){
            if(Map[0][i] != 1||Map[y][i] != 1)
            {System.out.println("외곽은 전부 바다여야해요!"); System.exit(0);}
        }
        //세로  | |
        for(int i = 0; i < mapsize[1]; i++){
            if(Map[i][0] != 1 || Map[i][x] != 1)
            {System.out.println("외곽은 전부 바다여야해요!"); System.exit(0);}
        }

        //맵 크기 줄여서 넣어주기
        /*for(int i = 1; i < y; i++){for(int j = 1; j < x; j++){
            Map[i-1][j-1] = Map[i][j];
            Map[i][j] = 1;
        }}*/
    }


    static int visX[] = new int[100]; static int visY[] = new int[100];  //이동했던 노드들
    static int Exp = 0, Vindex = 1;  //탐색 횟수, 방문인덱스
    static int SearchLand(int dir, int size[]) {
        int how;   //이동할 위치
        boolean XY;   //true : X, fasle : Y

        switch(dir){
            case 0:   //Up
                how = -1;       //받아야할거 dir, how, size, XY
                XY = false;
                dir = 3;

                Move(dir, how, size, XY);
                break;
            case 1:   //Right
                how = 1;
                XY = true;
                dir = 0;
                Move(dir, how, size, XY);
                break;
            case 2:   //Down
                how = 1;
                XY = false;
                dir = 1;
                Move(dir, how, size, XY);
                break;
            case 3:   //Left
                how = -1;
                XY = true;
                dir = 2;
                Move(dir, how, size, XY);
                break;
        }
        return count;
    }
    //이동
    static void Move(int dir, int how, int size[], boolean XY){

        if(IsMove(how, XY)){
            X = XY ? X+how : X;
            Y = XY ? Y : Y+how;
            Map[Y][X] = 2;
            Exp = 0;
            count++;

            visX[Vindex] = X; visY[Vindex] = Y;
            Vindex++;

            SearchLand(dir, size);
        }
        else if(Exp == 4){
            visX[Vindex-1] = -1; visY[Vindex-1] = -1;
            back(dir, size, 2);
        }
        else
        {Exp+=1; SearchLand(dir, size);}
    }
    static void back(int dir, int size[], int i){
        int v = Vindex-i;
        Vindex--;

        if(v != -1){
        X = visX[v]; Y = visY[v];
        visX[v] = -1; visY[v] = -1;

        if(IsMove()){ Vindex--; Exp = 0; SearchLand(dir, size); }
        else{Exp = 0; back(dir, size, i);}}
    }
    static boolean IsMove(int h, boolean xy){
        int land;

        land = xy ? Map[Y][X+h] : Map[Y+h][X];
        if(land == 0){ return true;}
        else {return false;}
    }
    static boolean IsMove(){
        if(Map[Y+1][X] == 0) {return true;}
        if(Map[Y-1][X] == 0) {return true;}
        if(Map[Y][X+1] == 0) {return true;}
        if(Map[Y][X-1] == 0) {return true;}
        else{return false;}
    }













    //디버그전용//

    //맵 상태확인
    static void Mapstatus(int X, int Y){
        for(int i = 0; i < Y; i++){for(int j = 0; j < X; j++){
            System.out.print(Map[i][j]+" ");
        }
        System.out.println();
        }
        System.out.println();
    }